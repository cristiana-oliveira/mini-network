AWSTemplateFormatVersion: 2010-09-09
Description: "Build a stack with CloudFormation for the miniNetwork"
Parameters:
  EnvironmentType:
    Description: "Specify the Environment type of the stack"
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  DBInstanceIdentifier:
    Type: String
    Default: "webapp-db"
  DBUsername:
    NoEcho: "true"
    Description: Username for Postgresql database access
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
    Default: "postgres"
  DBPassword:
    NoEcho: "true"
    Description: Password Postgresql database access
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Must contain only alphanumeric characters.
Mappings:
  EnvironmentToInstanceType:
    dev:
      InstanceType: t2.micro
    test:
      InstanceType: t2.micro
    prod:
      InstanceType: t2.small

Resources:
  BackendAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType:
        !FindInMap [
          EnvironmentToInstanceType,
          !Ref EnvironmentType,
          InstanceType,
        ]
      SecurityGroupIds:
        - !Ref BackendSecurityGroup
      SubnetId: PrivateSubnet
      Tags:
        - Key: Name
          Value: miniNetwork
        - Key: stage
          Value: !Ref EnvironmentType
        - Key: App
          Value: BackendAppInstance

  FrontEndAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType:
        !FindInMap [
          EnvironmentToInstanceType,
          !Ref EnvironmentType,
          InstanceType,
        ]
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      SubnetId: PublicSubnet
      Tags:
        - Key: Name
          Value: miniNetwork
        - Key: stage
          Value: !Ref EnvironmentType
        - Key: App
          Value: FrontEndAppInstance
  WebAppDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      AllocatedStorage: "5"
      DBInstanceClass: db.t3.micro
      SubnetId: PrivateSubnet
      SecurityGroupIds:
        - !Ref DataBaseSecurityGroup
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      Tags:
        - Key: Name
          Value: !Join [ "-", [ webapp-rds, !Ref EnvironmentType ] ]
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

Outputs:
  WebBackendServerPublicDNS:
    Description: "Public DNS of Backend EC2 instance"
    Value: !GetAtt BackendAppInstance.PublicDnsName
  WebFrontEndServerPublicDNS:
    Description: "Public DNS of Backend EC2 instance"
    Value: !GetAtt FrontEndAppInstance.PublicDnsName
  WebAppDatabaseEndpoint:
    Description: "Connection endpoint for the database"
    Value: !GetAtt WebAppDatabase.Endpoint.Address