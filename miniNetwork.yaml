AWSTemplateFormatVersion: 2010-09-09
Description: "Build a stack with CloudFormation for the miniNetwork"
Parameters:
  EnvironmentType:
    Description: "Specify the Environment type of the stack"
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  DBInstanceIdentifier:
    Type: String
    Default: "webapp-db"
  DBUsername:
    NoEcho: "true"
    Description: Username for Postgresql database access
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
    Default: "postgres"
  DBPassword:
    NoEcho: "true"
    Description: Password Postgresql database access
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Must contain only alphanumeric characters.
Mappings:
  EnvironmentToInstanceType:
    dev:
      InstanceType: t2.micro
    test:
      InstanceType: t2.micro
    prod:
      InstanceType: t2.small

Resources:
  # VPC
  MiniNetworkVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub  ${AWS::StackName}
  # SUBNETS
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, Fn::GetAZs: !Ref  'AWS::Region' ]
      VpcId: !Ref  MiniNetworkVPC
      Tags:
        - Key: Name
          Value: PrivateSubnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: True
      AvailabilityZone: !Select [ 1, Fn::GetAZs: !Ref  'AWS::Region' ]
      VpcId: !Ref  MiniNetworkVPC
      Tags:
        - Key: Name
          Value: PublicSubnet
  # INTERNET GATEWAY
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub  ${AWS::StackName}-Gateway
  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MiniNetworkVPC
      InternetGatewayId: !Ref InternetGateway
  #Route Table Configurations
  PubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: PubRoute
      VpcId: !Ref  MiniNetworkVPC
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: PriRoute
      VpcId: !Ref  MiniNetworkVPC
    #Subnet to Route Table associations
  PubSubRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref  PubRouteTable
      SubnetId: !Ref  PublicSubnet
  InternalAppRouteAss:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref  PrivateRouteTable
      SubnetId: !Ref  PrivateSubnet
  #Routes Configuration
  InternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref  PubRouteTable
  # ELASTIC IP
  NatPublicIP:
    Type: AWS::EC2::EIP
    DependsOn: MiniNetworkVPC
    Properties:
      Domain: vpc
  # NAT GATEWAY
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NatPublicIP
    Properties:
      SubnetId: !Ref PublicSubnet
      AllocationId: !GetAtt NatPublicIP.AllocationId
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
  DataBaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Data Base SecurityGroup
      GroupName: DataBaseSecurityGroup
      VpcId: !Ref  MiniNetworkVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
  BackendSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref MiniNetworkVPC
      GroupName: BackendSecurityGroup
      GroupDescription: Enable HTTP/HTTPS access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  FrontendSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref MiniNetworkVPC
      GroupName: FrontendSecurityGroup
      GroupDescription: Enable HTTP/HTTPS access
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  BackendAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType:
        !FindInMap [
          EnvironmentToInstanceType,
          !Ref EnvironmentType,
          InstanceType,
        ]
      SecurityGroupIds:
        - !Ref BackendSecurityGroup
      SubnetId: !Ref PrivateSubnet
      Tags:
        - Key: Name
          Value: miniNetwork
        - Key: stage
          Value: !Ref EnvironmentType
        - Key: App
          Value: BackendAppInstance
  FrontEndAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType:
        !FindInMap [
          EnvironmentToInstanceType,
          !Ref EnvironmentType,
          InstanceType,
        ]
      SecurityGroupIds:
        - !Ref FrontendSecurityGroup
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: miniNetwork
        - Key: stage
          Value: !Ref EnvironmentType
        - Key: App
          Value: FrontEndAppInstance
  WebAppDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      AllocatedStorage: "5"
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      Tags:
        - Key: Name
          Value: !Join [ "-", [ webapp-rds, !Ref EnvironmentType ] ]
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

Outputs:
  WebBackendServerPublicDNS:
    Description: "Public DNS of Backend EC2 instance"
    Value: !Ref BackendAppInstance
    Export:
      Name: WebBackendServerPublicDNS
  WebFrontEndServerPublicDNS:
    Description: "Public DNS of Backend EC2 instance"
    Value: !Ref FrontEndAppInstance
    Export:
      Name: WebFrontEndServerPublicDNS
  WebAppDatabaseEndpoint:
    Description: "Connection endpoint for the database"
    Value: !Ref WebAppDatabase
    Export:
      Name: WebAppDatabaseEndpoint
  #VPC
  MiniNetworkVPC:
    Description: Details about vpc
    Value: !Ref  MiniNetworkVPC
    Export:
      Name: MiniNetworkVPC
  PrivateSubnetOut:
    Description: Output of the private internal subnet
    Value: !Ref  PrivateSubnet
    Export:
      Name: PrivateSubnet
  PublicSubnetOut:
    Description: Output of the Public subnet
    Value: !Ref  PublicSubnet
    Export:
      Name: PublicSubnet